Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/xenial64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
   config.vm.provider "virtualbox" do |vb|
     # Display the VirtualBox GUI when booting the machine
     # vb.gui = true
  
     # Customize the amount of memory on the VM:
     vb.memory = "2048"
   end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL
     echo "Upating packages"
     sudo apt-get -y update
     sudo apt-get -y install docker.io zfsutils-linux
     echo "Preparing fli storage"
     sudo zfs destroy -r chq && zpool destroy chq
     sudo rm -rf $HOME/zfs.disk
     sudo fallocate -l 3G $HOME/zfs.disk && zpool create -f chq $HOME/zfs.disk
     echo "Getting fli ready"
     sudo docker pull clusterhq/fli
     sudo echo "alias fli='docker run --rm --privileged -v /chq/:/chq/:shared -v /var/logs/:/var/logs/ -v /root:/root -v /lib/modules:/lib/modules clusterhq/fli'" >> /root/.bashrc
     sudo curl -o docker-compose -L "https://github.com/docker/compose/releases/download/1.8.1/docker-compose-$(uname -s)-$(uname -m)"
     sudo mv docker-compose /usr/local/bin/docker-compose
     sudo chmod +x /usr/local/bin/docker-compose
     sudo wget https://s3.amazonaws.com/clusterhq-fli-docker/0.1.0/fli-docker
     sudo chmod +x fli-docker
     sudo mv fli-docker /usr/local/bin/
     sudo wget https://storage.googleapis.com/golang/go1.7.3.linux-amd64.tar.gz
     sudo tar -C /usr/local -xzf go1.7.3.linux-amd64.tar.gz 
     sudo echo "export PATH=$PATH:/usr/local/go/bin" >> /root/.bashrc
     sudo echo "export GOPATH=$HOME/work" >> /root/.bashrc
   SHELL
end
